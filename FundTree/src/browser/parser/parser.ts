/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* ---
* import { table2Enum, cleanComment, extractAttrType, 
* extractAttrNode, extractAttrVal, extractAttrId, extractMinVal, 
* extractMaxVal, extractOptions, extractAttrSignalName } from "./parserHelpers";
* ---
* Choice := CanNode | CanMessage | SignalMultiplexVal | CanSignal | ValTable | Val | SignalComment | MessageComment | NodeComment |
* GlobalAttribute | MessageAttribute | SignalAttribute | NodeAttribute | AttributeDefault | AttributeValue |
* Version | NewSymbolValue | BlankLine | NewSymbol | BusSpeed | Comment | CanEnvironmentVariable | EnvironmentVarData |
* EnvironmentVariableComment | MessageTransmitter | EnvironmentAttribute | EnvironmentVal | CanSignalGroup | SigValType
* BlankLine := ''$
* CanSignalGroup := 'SIG_GROUP_\s+' raw_id={'[0-9]+'} '\s+' name={'[a-zA-Z0-9_]+'} '\s+' raw_group_number={'[0-9]+'} '\s+:\s*' raw_signal_string={'[a-zA-Z0-9_\s]*'} '\s*'
*     .signals = string[] { return raw_signal_string.replace(';', '').split(' '); }
*     .id = number {return parseInt(raw_id,10);}
*     .group_number = number {return parseInt(raw_group_number,10);}
* MessageTransmitter := 'BO_TX_BU_\s+' raw_id={'[0-9]+'} '\s*:\s*' raw_nodes = {'.*'}
*     .id = number {return parseInt(raw_id,10);}
*     .nodes = string[] {return raw_nodes.replace(';', '').split(',');}
* CanEnvironmentVariable := 'EV_\s+' name={'[a-zA-Z0-9_]+'} '\s*:\s*' type={'0|1|2'} '\s+\[' raw_min={'[\-0-9.]+'} '\|' raw_max={'[\-0-9.]+'} '\]\s' raw_unit={'".*"'} '\s+' raw_inital_value={'[\-0-9.]+'} '\s+' raw_ev_id={'[0-9]+'} '\s+' access_type={'[a-zA-Z0-9_]+'} '\s+' node={'[a-zA-Z0-9_]+'}
*     .min = number {return parseFloat(raw_min);}
*     .max = number {return parseFloat(raw_max);}
*     .unit = string {return cleanComment(raw_unit);}
*     .initial_value = number {return parseFloat(raw_inital_value);}
*     .ev_id = number {return parseInt(raw_ev_id,10);}
* EnvironmentVarData := 'ENVVAR_DATA_\s+' name={'[a-zA-Z0-9_]+'} '\s*:\s*' raw_value={'[0-9]+'}
*     .value = number {return parseInt(raw_value);}
* EnvironmentVariableComment := 'CM_ EV_\s+' name={'[a-zA-Z0-9_]+'} '\s' raw_comment={'.*'}
*     .comment = string {return cleanComment(raw_comment);}
* Version := 'VERSION' '\s+' raw_version={'.*'}
*     .version = string {return cleanComment(raw_version);}
* NewSymbol := 'NS_\s*:'
* BusSpeed := 'BS_:'
* NewSymbolValue := '\s+' symbol={'[a-zA-Z_]+_'} '$'?
* CanNode := 'BU_:\s*' raw_node_string={'[a-zA-Z0-9_\s]*'} '\s*' ';'?
*     .node_names = string[] { return raw_node_string.split(' '); }
* CanMessage := 'BO_\s' raw_id={'[0-9]+'} '\s*' name={'[a-zA-Z0-9_]*'} ':\s*' raw_dlc={'[0-9]'} '\s*' node={'[a-zA-Z0-9_]*'}
*     .id = number {return parseInt(raw_id,10);}
*     .dlc = number {return parseInt(raw_dlc,10);}
* CanSignal := '\s*SG_\s' name={'[a-zA-Z0-9_]+'} '\s*' multiplex={'M|[m0-9M]*|\s'} '\s*:\s' raw_start_bit={'[0-9]+'} '\|' raw_length={'[0-9]+'} '@' raw_endian={'[1|0]'} raw_signed={'[+|-]'} '\s\(' raw_factor={'[\-0-9.]+'} ',' raw_offset={'[\-0-9.]+'} '\)\s\[' raw_min={'[\-0-9.]+'} '\|' raw_max={'[\-0-9.]+'} '\]\s' raw_unit={'".*"'} '\s' raw_node_str={'.*'}
*     .multiplexer = boolean {return multiplex.includes('M');}
*     .unit = string {return cleanComment(raw_unit);}
*     .nodes = string[] {return raw_node_str.trim().split(',');}
*     .start_bit = number {return parseInt(raw_start_bit,10);}
*     .length = number {return parseInt(raw_length,10);}
*     .endian = string {return raw_endian === '1' ? 'Intel' : 'Motorola'}
*     .signed = boolean {return raw_signed === '-' ? true : false;}
*     .factor = number {return parseFloat(raw_factor);}
*     .offset = number {return parseFloat(raw_offset);}
*     .min = number {return parseFloat(raw_min);}
*     .max = number {return parseFloat(raw_max);}
* SignalMultiplexVal := 'SG_MUL_VAL_\s' raw_id={'[0-9]+'} '\s*' name={'[a-zA-Z0-9_]+'} '\s*' switch_name={'[a-zA-Z0-9_]+'} '\s*' raw_value_ranges={'[0-9-,\s]+;'}
*     .id = number {return parseInt(raw_id,10);}
*     .value_ranges = string[][] {return raw_value_ranges.replace(';','').replace(/\s/g,'').split(',').map((value)=>{return value.split('-');});}
* ValTable := 'VAL_TABLE_\s' name={'[a-zA-Z0-9_]+'} '\s' raw_table={'.*'}
*     .enum = Map<number,string> {return table2Enum(raw_table.replace(';',''));}
* Val := 'VAL_\s' raw_id={'[0-9]+'} '\s' name={'[a-zA-Z0-9_]+'} '\s' raw_table={'.*'}
*     .id = number {return parseInt(raw_id,10);}
*     .enum = Map<number,string> {return table2Enum(raw_table.replace(';',''));}
* EnvironmentVal := 'VAL_\s' !'0-9' name={'[a-zA-Z0-9_]+'} '\s' raw_table={'.*'}
*     .enum = Map<number,string> {return table2Enum(raw_table.replace(';',''));}
* Comment := 'CM_\s' !'[SG_|BO_|BU_|EV_]' raw_comment={'.*'}
*     .comment = string {return cleanComment(raw_comment);}
* SignalComment := 'CM_ SG_\s' raw_id={'[0-9]+'} '\s' name={'[a-zA-Z0-9_]+'} '\s' raw_comment={'.*'}
*     .comment = string {return cleanComment(raw_comment);}
*     .id = number {return parseInt(raw_id,10);}
* MessageComment := 'CM_ BO_\s' raw_id={'[0-9]+'} '\s' raw_comment={'.*'}
*     .comment = string {return cleanComment(raw_comment);}
*     .id = number {return parseInt(raw_id,10);}
* NodeComment := 'CM_ BU_\s' name={'[a-zA-Z0-9_]+'} '\s' raw_comment={'.*'}
*     .comment = string {return cleanComment(raw_comment);}
* GlobalAttribute := 'BA_DEF_\s+' '"'name={'[a-zA-Z0-9_]+'}'"' '\s' type={'[A-Z]+'} '\s' raw_value={'.*'}
*     .min = number {return extractMinVal(type, raw_value);}
*     .max = number {return extractMaxVal(type, raw_value);}
*     .enum = string[] {return extractOptions(type, raw_value);}
* MessageAttribute := 'BA_DEF_ BO_\s+' '"'name={'[a-zA-Z0-9_]+'}'"' '\s' type={'[A-Z]+'} '\s'? raw_value={'.*'}
*     .min = number {return extractMinVal(type, raw_value);}
*     .max = number {return extractMaxVal(type, raw_value);}
*     .enum = string[] {return extractOptions(type, raw_value);}
* EnvironmentAttribute := 'BA_DEF_ EV_\s+' '"'name={'[a-zA-Z0-9_]+'}'"' '\s' type={'[A-Z]+'} '\s'? raw_value={'.*'}
*     .min = number {return extractMinVal(type, raw_value);}
*     .max = number {return extractMaxVal(type, raw_value);}
*     .enum = string[] {return extractOptions(type, raw_value);}
* NodeAttribute := 'BA_DEF_ BU_\s+' '"'name={'[a-zA-Z0-9_]+'}'"' '\s' type={'[A-Z]+'} '\s'? raw_value={'.*'}
*     .min = number {return extractMinVal(type, raw_value);}
*     .max = number {return extractMaxVal(type, raw_value);}
*     .enum = string[] {return extractOptions(type, raw_value);}
* SignalAttribute := 'BA_DEF_ SG_\s+' '"'name={'[a-zA-Z0-9_]+'}'"' '\s' type={'[A-Z]+'} '\s'? raw_value={'.*'}
*     .min = number {return extractMinVal(type, raw_value);}
*     .max = number {return extractMaxVal(type, raw_value);}
*     .enum = string[] {return extractOptions(type, raw_value);}
* AttributeDefault := 'BA_DEF_DEF_\s+' '"'name={'[a-zA-Z0-9_]+'}'"' '\s' raw_value={'.*'}
*     .value = string {return cleanComment(raw_value);}
* AttributeValue := 'BA_\s+' '"'name={'[a-zA-Z0-9_]+'}'"' '\s' raw={'.*'}
*     .type = string {return extractAttrType(raw);}
*     .node = string {return extractAttrNode(this.type,raw);}
*     .id = number {return parseInt(extractAttrId(this.type,raw),10);}
*     .signal = string {return extractAttrSignalName(this.type,raw);}
*     .value = string {return extractAttrVal(this.type,raw);}
* SigValType := 'SIG_VALTYPE_\s+' raw_id={'[0-9]+'} '\s+' name={'[a-zA-Z0-9_]+'} '\s*:\s*' raw_type={'1|2'}
*     .id = number {return parseInt(raw_id,10);}
*     .type = number {return parseInt(raw_type,10);}
*/

import { table2Enum, cleanComment, extractAttrType, 
extractAttrNode, extractAttrVal, extractAttrId, extractMinVal, 
extractMaxVal, extractOptions, extractAttrSignalName } from "./parserHelpers";

type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
export interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    Choice_1 = "Choice_1",
    Choice_2 = "Choice_2",
    Choice_3 = "Choice_3",
    Choice_4 = "Choice_4",
    Choice_5 = "Choice_5",
    Choice_6 = "Choice_6",
    Choice_7 = "Choice_7",
    Choice_8 = "Choice_8",
    Choice_9 = "Choice_9",
    Choice_10 = "Choice_10",
    Choice_11 = "Choice_11",
    Choice_12 = "Choice_12",
    Choice_13 = "Choice_13",
    Choice_14 = "Choice_14",
    Choice_15 = "Choice_15",
    Choice_16 = "Choice_16",
    Choice_17 = "Choice_17",
    Choice_18 = "Choice_18",
    Choice_19 = "Choice_19",
    Choice_20 = "Choice_20",
    Choice_21 = "Choice_21",
    Choice_22 = "Choice_22",
    Choice_23 = "Choice_23",
    Choice_24 = "Choice_24",
    Choice_25 = "Choice_25",
    Choice_26 = "Choice_26",
    Choice_27 = "Choice_27",
    Choice_28 = "Choice_28",
    Choice_29 = "Choice_29",
    BlankLine = "BlankLine",
    CanSignalGroup = "CanSignalGroup",
    CanSignalGroup_$0 = "CanSignalGroup_$0",
    CanSignalGroup_$1 = "CanSignalGroup_$1",
    CanSignalGroup_$2 = "CanSignalGroup_$2",
    CanSignalGroup_$3 = "CanSignalGroup_$3",
    MessageTransmitter = "MessageTransmitter",
    MessageTransmitter_$0 = "MessageTransmitter_$0",
    MessageTransmitter_$1 = "MessageTransmitter_$1",
    CanEnvironmentVariable = "CanEnvironmentVariable",
    CanEnvironmentVariable_$0 = "CanEnvironmentVariable_$0",
    CanEnvironmentVariable_$1 = "CanEnvironmentVariable_$1",
    CanEnvironmentVariable_$2 = "CanEnvironmentVariable_$2",
    CanEnvironmentVariable_$3 = "CanEnvironmentVariable_$3",
    CanEnvironmentVariable_$4 = "CanEnvironmentVariable_$4",
    CanEnvironmentVariable_$5 = "CanEnvironmentVariable_$5",
    CanEnvironmentVariable_$6 = "CanEnvironmentVariable_$6",
    CanEnvironmentVariable_$7 = "CanEnvironmentVariable_$7",
    CanEnvironmentVariable_$8 = "CanEnvironmentVariable_$8",
    EnvironmentVarData = "EnvironmentVarData",
    EnvironmentVarData_$0 = "EnvironmentVarData_$0",
    EnvironmentVarData_$1 = "EnvironmentVarData_$1",
    EnvironmentVariableComment = "EnvironmentVariableComment",
    EnvironmentVariableComment_$0 = "EnvironmentVariableComment_$0",
    EnvironmentVariableComment_$1 = "EnvironmentVariableComment_$1",
    Version = "Version",
    Version_$0 = "Version_$0",
    NewSymbol = "NewSymbol",
    BusSpeed = "BusSpeed",
    NewSymbolValue = "NewSymbolValue",
    NewSymbolValue_$0 = "NewSymbolValue_$0",
    CanNode = "CanNode",
    CanNode_$0 = "CanNode_$0",
    CanMessage = "CanMessage",
    CanMessage_$0 = "CanMessage_$0",
    CanMessage_$1 = "CanMessage_$1",
    CanMessage_$2 = "CanMessage_$2",
    CanMessage_$3 = "CanMessage_$3",
    CanSignal = "CanSignal",
    CanSignal_$0 = "CanSignal_$0",
    CanSignal_$1 = "CanSignal_$1",
    CanSignal_$2 = "CanSignal_$2",
    CanSignal_$3 = "CanSignal_$3",
    CanSignal_$4 = "CanSignal_$4",
    CanSignal_$5 = "CanSignal_$5",
    CanSignal_$6 = "CanSignal_$6",
    CanSignal_$7 = "CanSignal_$7",
    CanSignal_$8 = "CanSignal_$8",
    CanSignal_$9 = "CanSignal_$9",
    CanSignal_$10 = "CanSignal_$10",
    CanSignal_$11 = "CanSignal_$11",
    SignalMultiplexVal = "SignalMultiplexVal",
    SignalMultiplexVal_$0 = "SignalMultiplexVal_$0",
    SignalMultiplexVal_$1 = "SignalMultiplexVal_$1",
    SignalMultiplexVal_$2 = "SignalMultiplexVal_$2",
    SignalMultiplexVal_$3 = "SignalMultiplexVal_$3",
    ValTable = "ValTable",
    ValTable_$0 = "ValTable_$0",
    ValTable_$1 = "ValTable_$1",
    Val = "Val",
    Val_$0 = "Val_$0",
    Val_$1 = "Val_$1",
    Val_$2 = "Val_$2",
    EnvironmentVal = "EnvironmentVal",
    EnvironmentVal_$0 = "EnvironmentVal_$0",
    EnvironmentVal_$1 = "EnvironmentVal_$1",
    Comment = "Comment",
    Comment_$0 = "Comment_$0",
    SignalComment = "SignalComment",
    SignalComment_$0 = "SignalComment_$0",
    SignalComment_$1 = "SignalComment_$1",
    SignalComment_$2 = "SignalComment_$2",
    MessageComment = "MessageComment",
    MessageComment_$0 = "MessageComment_$0",
    MessageComment_$1 = "MessageComment_$1",
    NodeComment = "NodeComment",
    NodeComment_$0 = "NodeComment_$0",
    NodeComment_$1 = "NodeComment_$1",
    GlobalAttribute = "GlobalAttribute",
    GlobalAttribute_$0 = "GlobalAttribute_$0",
    GlobalAttribute_$1 = "GlobalAttribute_$1",
    GlobalAttribute_$2 = "GlobalAttribute_$2",
    MessageAttribute = "MessageAttribute",
    MessageAttribute_$0 = "MessageAttribute_$0",
    MessageAttribute_$1 = "MessageAttribute_$1",
    MessageAttribute_$2 = "MessageAttribute_$2",
    EnvironmentAttribute = "EnvironmentAttribute",
    EnvironmentAttribute_$0 = "EnvironmentAttribute_$0",
    EnvironmentAttribute_$1 = "EnvironmentAttribute_$1",
    EnvironmentAttribute_$2 = "EnvironmentAttribute_$2",
    NodeAttribute = "NodeAttribute",
    NodeAttribute_$0 = "NodeAttribute_$0",
    NodeAttribute_$1 = "NodeAttribute_$1",
    NodeAttribute_$2 = "NodeAttribute_$2",
    SignalAttribute = "SignalAttribute",
    SignalAttribute_$0 = "SignalAttribute_$0",
    SignalAttribute_$1 = "SignalAttribute_$1",
    SignalAttribute_$2 = "SignalAttribute_$2",
    AttributeDefault = "AttributeDefault",
    AttributeDefault_$0 = "AttributeDefault_$0",
    AttributeDefault_$1 = "AttributeDefault_$1",
    AttributeValue = "AttributeValue",
    AttributeValue_$0 = "AttributeValue_$0",
    AttributeValue_$1 = "AttributeValue_$1",
    SigValType = "SigValType",
    SigValType_$0 = "SigValType_$0",
    SigValType_$1 = "SigValType_$1",
    SigValType_$2 = "SigValType_$2",
    $EOF = "$EOF",
}
export type Choice = Choice_1 | Choice_2 | Choice_3 | Choice_4 | Choice_5 | Choice_6 | Choice_7 | Choice_8 | Choice_9 | Choice_10 | Choice_11 | Choice_12 | Choice_13 | Choice_14 | Choice_15 | Choice_16 | Choice_17 | Choice_18 | Choice_19 | Choice_20 | Choice_21 | Choice_22 | Choice_23 | Choice_24 | Choice_25 | Choice_26 | Choice_27 | Choice_28 | Choice_29;
export type Choice_1 = CanNode;
export type Choice_2 = CanMessage;
export type Choice_3 = SignalMultiplexVal;
export type Choice_4 = CanSignal;
export type Choice_5 = ValTable;
export type Choice_6 = Val;
export type Choice_7 = SignalComment;
export type Choice_8 = MessageComment;
export type Choice_9 = NodeComment;
export type Choice_10 = GlobalAttribute;
export type Choice_11 = MessageAttribute;
export type Choice_12 = SignalAttribute;
export type Choice_13 = NodeAttribute;
export type Choice_14 = AttributeDefault;
export type Choice_15 = AttributeValue;
export type Choice_16 = Version;
export type Choice_17 = NewSymbolValue;
export type Choice_18 = BlankLine;
export type Choice_19 = NewSymbol;
export type Choice_20 = BusSpeed;
export type Choice_21 = Comment;
export type Choice_22 = CanEnvironmentVariable;
export type Choice_23 = EnvironmentVarData;
export type Choice_24 = EnvironmentVariableComment;
export type Choice_25 = MessageTransmitter;
export type Choice_26 = EnvironmentAttribute;
export type Choice_27 = EnvironmentVal;
export type Choice_28 = CanSignalGroup;
export type Choice_29 = SigValType;
export interface BlankLine {
    kind: ASTKinds.BlankLine;
}
export class CanSignalGroup {
    public kind: ASTKinds.CanSignalGroup = ASTKinds.CanSignalGroup;
    public raw_id: CanSignalGroup_$0;
    public name: CanSignalGroup_$1;
    public raw_group_number: CanSignalGroup_$2;
    public raw_signal_string: CanSignalGroup_$3;
    public signals: string[];
    public id: number;
    public group_number: number;
    constructor(raw_id: CanSignalGroup_$0, name: CanSignalGroup_$1, raw_group_number: CanSignalGroup_$2, raw_signal_string: CanSignalGroup_$3){
        this.raw_id = raw_id;
        this.name = name;
        this.raw_group_number = raw_group_number;
        this.raw_signal_string = raw_signal_string;
        this.signals = ((): string[] => {
        return raw_signal_string.replace(';', '').split(' ');
        })();
        this.id = ((): number => {
        return parseInt(raw_id,10);
        })();
        this.group_number = ((): number => {
        return parseInt(raw_group_number,10);
        })();
    }
}
export type CanSignalGroup_$0 = string;
export type CanSignalGroup_$1 = string;
export type CanSignalGroup_$2 = string;
export type CanSignalGroup_$3 = string;
export class MessageTransmitter {
    public kind: ASTKinds.MessageTransmitter = ASTKinds.MessageTransmitter;
    public raw_id: MessageTransmitter_$0;
    public raw_nodes: MessageTransmitter_$1;
    public id: number;
    public nodes: string[];
    constructor(raw_id: MessageTransmitter_$0, raw_nodes: MessageTransmitter_$1){
        this.raw_id = raw_id;
        this.raw_nodes = raw_nodes;
        this.id = ((): number => {
        return parseInt(raw_id,10);
        })();
        this.nodes = ((): string[] => {
        return raw_nodes.replace(';', '').split(',');
        })();
    }
}
export type MessageTransmitter_$0 = string;
export type MessageTransmitter_$1 = string;
export class CanEnvironmentVariable {
    public kind: ASTKinds.CanEnvironmentVariable = ASTKinds.CanEnvironmentVariable;
    public name: CanEnvironmentVariable_$0;
    public type: CanEnvironmentVariable_$1;
    public raw_min: CanEnvironmentVariable_$2;
    public raw_max: CanEnvironmentVariable_$3;
    public raw_unit: CanEnvironmentVariable_$4;
    public raw_inital_value: CanEnvironmentVariable_$5;
    public raw_ev_id: CanEnvironmentVariable_$6;
    public access_type: CanEnvironmentVariable_$7;
    public node: CanEnvironmentVariable_$8;
    public min: number;
    public max: number;
    public unit: string;
    public initial_value: number;
    public ev_id: number;
    constructor(name: CanEnvironmentVariable_$0, type: CanEnvironmentVariable_$1, raw_min: CanEnvironmentVariable_$2, raw_max: CanEnvironmentVariable_$3, raw_unit: CanEnvironmentVariable_$4, raw_inital_value: CanEnvironmentVariable_$5, raw_ev_id: CanEnvironmentVariable_$6, access_type: CanEnvironmentVariable_$7, node: CanEnvironmentVariable_$8){
        this.name = name;
        this.type = type;
        this.raw_min = raw_min;
        this.raw_max = raw_max;
        this.raw_unit = raw_unit;
        this.raw_inital_value = raw_inital_value;
        this.raw_ev_id = raw_ev_id;
        this.access_type = access_type;
        this.node = node;
        this.min = ((): number => {
        return parseFloat(raw_min);
        })();
        this.max = ((): number => {
        return parseFloat(raw_max);
        })();
        this.unit = ((): string => {
        return cleanComment(raw_unit);
        })();
        this.initial_value = ((): number => {
        return parseFloat(raw_inital_value);
        })();
        this.ev_id = ((): number => {
        return parseInt(raw_ev_id,10);
        })();
    }
}
export type CanEnvironmentVariable_$0 = string;
export type CanEnvironmentVariable_$1 = string;
export type CanEnvironmentVariable_$2 = string;
export type CanEnvironmentVariable_$3 = string;
export type CanEnvironmentVariable_$4 = string;
export type CanEnvironmentVariable_$5 = string;
export type CanEnvironmentVariable_$6 = string;
export type CanEnvironmentVariable_$7 = string;
export type CanEnvironmentVariable_$8 = string;
export class EnvironmentVarData {
    public kind: ASTKinds.EnvironmentVarData = ASTKinds.EnvironmentVarData;
    public name: EnvironmentVarData_$0;
    public raw_value: EnvironmentVarData_$1;
    public value: number;
    constructor(name: EnvironmentVarData_$0, raw_value: EnvironmentVarData_$1){
        this.name = name;
        this.raw_value = raw_value;
        this.value = ((): number => {
        return parseInt(raw_value);
        })();
    }
}
export type EnvironmentVarData_$0 = string;
export type EnvironmentVarData_$1 = string;
export class EnvironmentVariableComment {
    public kind: ASTKinds.EnvironmentVariableComment = ASTKinds.EnvironmentVariableComment;
    public name: EnvironmentVariableComment_$0;
    public raw_comment: EnvironmentVariableComment_$1;
    public comment: string;
    constructor(name: EnvironmentVariableComment_$0, raw_comment: EnvironmentVariableComment_$1){
        this.name = name;
        this.raw_comment = raw_comment;
        this.comment = ((): string => {
        return cleanComment(raw_comment);
        })();
    }
}
export type EnvironmentVariableComment_$0 = string;
export type EnvironmentVariableComment_$1 = string;
export class Version {
    public kind: ASTKinds.Version = ASTKinds.Version;
    public raw_version: Version_$0;
    public version: string;
    constructor(raw_version: Version_$0){
        this.raw_version = raw_version;
        this.version = ((): string => {
        return cleanComment(raw_version);
        })();
    }
}
export type Version_$0 = string;
export type NewSymbol = string;
export type BusSpeed = string;
export interface NewSymbolValue {
    kind: ASTKinds.NewSymbolValue;
    symbol: NewSymbolValue_$0;
}
export type NewSymbolValue_$0 = string;
export class CanNode {
    public kind: ASTKinds.CanNode = ASTKinds.CanNode;
    public raw_node_string: CanNode_$0;
    public node_names: string[];
    constructor(raw_node_string: CanNode_$0){
        this.raw_node_string = raw_node_string;
        this.node_names = ((): string[] => {
        return raw_node_string.split(' ');
        })();
    }
}
export type CanNode_$0 = string;
export class CanMessage {
    public kind: ASTKinds.CanMessage = ASTKinds.CanMessage;
    public raw_id: CanMessage_$0;
    public name: CanMessage_$1;
    public raw_dlc: CanMessage_$2;
    public node: CanMessage_$3;
    public id: number;
    public dlc: number;
    constructor(raw_id: CanMessage_$0, name: CanMessage_$1, raw_dlc: CanMessage_$2, node: CanMessage_$3){
        this.raw_id = raw_id;
        this.name = name;
        this.raw_dlc = raw_dlc;
        this.node = node;
        this.id = ((): number => {
        return parseInt(raw_id,10);
        })();
        this.dlc = ((): number => {
        return parseInt(raw_dlc,10);
        })();
    }
}
export type CanMessage_$0 = string;
export type CanMessage_$1 = string;
export type CanMessage_$2 = string;
export type CanMessage_$3 = string;
export class CanSignal {
    public kind: ASTKinds.CanSignal = ASTKinds.CanSignal;
    public name: CanSignal_$0;
    public multiplex: CanSignal_$1;
    public raw_start_bit: CanSignal_$2;
    public raw_length: CanSignal_$3;
    public raw_endian: CanSignal_$4;
    public raw_signed: CanSignal_$5;
    public raw_factor: CanSignal_$6;
    public raw_offset: CanSignal_$7;
    public raw_min: CanSignal_$8;
    public raw_max: CanSignal_$9;
    public raw_unit: CanSignal_$10;
    public raw_node_str: CanSignal_$11;
    public multiplexer: boolean;
    public unit: string;
    public nodes: string[];
    public start_bit: number;
    public length: number;
    public endian: string;
    public signed: boolean;
    public factor: number;
    public offset: number;
    public min: number;
    public max: number;
    constructor(name: CanSignal_$0, multiplex: CanSignal_$1, raw_start_bit: CanSignal_$2, raw_length: CanSignal_$3, raw_endian: CanSignal_$4, raw_signed: CanSignal_$5, raw_factor: CanSignal_$6, raw_offset: CanSignal_$7, raw_min: CanSignal_$8, raw_max: CanSignal_$9, raw_unit: CanSignal_$10, raw_node_str: CanSignal_$11){
        this.name = name;
        this.multiplex = multiplex;
        this.raw_start_bit = raw_start_bit;
        this.raw_length = raw_length;
        this.raw_endian = raw_endian;
        this.raw_signed = raw_signed;
        this.raw_factor = raw_factor;
        this.raw_offset = raw_offset;
        this.raw_min = raw_min;
        this.raw_max = raw_max;
        this.raw_unit = raw_unit;
        this.raw_node_str = raw_node_str;
        this.multiplexer = ((): boolean => {
        return multiplex.includes('M');
        })();
        this.unit = ((): string => {
        return cleanComment(raw_unit);
        })();
        this.nodes = ((): string[] => {
        return raw_node_str.trim().split(',');
        })();
        this.start_bit = ((): number => {
        return parseInt(raw_start_bit,10);
        })();
        this.length = ((): number => {
        return parseInt(raw_length,10);
        })();
        this.endian = ((): string => {
        return raw_endian === '1' ? 'Intel' : 'Motorola'
        })();
        this.signed = ((): boolean => {
        return raw_signed === '-' ? true : false;
        })();
        this.factor = ((): number => {
        return parseFloat(raw_factor);
        })();
        this.offset = ((): number => {
        return parseFloat(raw_offset);
        })();
        this.min = ((): number => {
        return parseFloat(raw_min);
        })();
        this.max = ((): number => {
        return parseFloat(raw_max);
        })();
    }
}
export type CanSignal_$0 = string;
export type CanSignal_$1 = string;
export type CanSignal_$2 = string;
export type CanSignal_$3 = string;
export type CanSignal_$4 = string;
export type CanSignal_$5 = string;
export type CanSignal_$6 = string;
export type CanSignal_$7 = string;
export type CanSignal_$8 = string;
export type CanSignal_$9 = string;
export type CanSignal_$10 = string;
export type CanSignal_$11 = string;
export class SignalMultiplexVal {
    public kind: ASTKinds.SignalMultiplexVal = ASTKinds.SignalMultiplexVal;
    public raw_id: SignalMultiplexVal_$0;
    public name: SignalMultiplexVal_$1;
    public switch_name: SignalMultiplexVal_$2;
    public raw_value_ranges: SignalMultiplexVal_$3;
    public id: number;
    public value_ranges: string[][];
    constructor(raw_id: SignalMultiplexVal_$0, name: SignalMultiplexVal_$1, switch_name: SignalMultiplexVal_$2, raw_value_ranges: SignalMultiplexVal_$3){
        this.raw_id = raw_id;
        this.name = name;
        this.switch_name = switch_name;
        this.raw_value_ranges = raw_value_ranges;
        this.id = ((): number => {
        return parseInt(raw_id,10);
        })();
        this.value_ranges = ((): string[][] => {
        return raw_value_ranges.replace(';','').replace(/\s/g,'').split(',').map((value)=>{return value.split('-');});
        })();
    }
}
export type SignalMultiplexVal_$0 = string;
export type SignalMultiplexVal_$1 = string;
export type SignalMultiplexVal_$2 = string;
export type SignalMultiplexVal_$3 = string;
export class ValTable {
    public kind: ASTKinds.ValTable = ASTKinds.ValTable;
    public name: ValTable_$0;
    public raw_table: ValTable_$1;
    public enum: Map<number,string>;
    constructor(name: ValTable_$0, raw_table: ValTable_$1){
        this.name = name;
        this.raw_table = raw_table;
        this.enum = ((): Map<number,string> => {
        return table2Enum(raw_table.replace(';',''));
        })();
    }
}
export type ValTable_$0 = string;
export type ValTable_$1 = string;
export class Val {
    public kind: ASTKinds.Val = ASTKinds.Val;
    public raw_id: Val_$0;
    public name: Val_$1;
    public raw_table: Val_$2;
    public id: number;
    public enum: Map<number,string>;
    constructor(raw_id: Val_$0, name: Val_$1, raw_table: Val_$2){
        this.raw_id = raw_id;
        this.name = name;
        this.raw_table = raw_table;
        this.id = ((): number => {
        return parseInt(raw_id,10);
        })();
        this.enum = ((): Map<number,string> => {
        return table2Enum(raw_table.replace(';',''));
        })();
    }
}
export type Val_$0 = string;
export type Val_$1 = string;
export type Val_$2 = string;
export class EnvironmentVal {
    public kind: ASTKinds.EnvironmentVal = ASTKinds.EnvironmentVal;
    public name: EnvironmentVal_$0;
    public raw_table: EnvironmentVal_$1;
    public enum: Map<number,string>;
    constructor(name: EnvironmentVal_$0, raw_table: EnvironmentVal_$1){
        this.name = name;
        this.raw_table = raw_table;
        this.enum = ((): Map<number,string> => {
        return table2Enum(raw_table.replace(';',''));
        })();
    }
}
export type EnvironmentVal_$0 = string;
export type EnvironmentVal_$1 = string;
export class Comment {
    public kind: ASTKinds.Comment = ASTKinds.Comment;
    public raw_comment: Comment_$0;
    public comment: string;
    constructor(raw_comment: Comment_$0){
        this.raw_comment = raw_comment;
        this.comment = ((): string => {
        return cleanComment(raw_comment);
        })();
    }
}
export type Comment_$0 = string;
export class SignalComment {
    public kind: ASTKinds.SignalComment = ASTKinds.SignalComment;
    public raw_id: SignalComment_$0;
    public name: SignalComment_$1;
    public raw_comment: SignalComment_$2;
    public comment: string;
    public id: number;
    constructor(raw_id: SignalComment_$0, name: SignalComment_$1, raw_comment: SignalComment_$2){
        this.raw_id = raw_id;
        this.name = name;
        this.raw_comment = raw_comment;
        this.comment = ((): string => {
        return cleanComment(raw_comment);
        })();
        this.id = ((): number => {
        return parseInt(raw_id,10);
        })();
    }
}
export type SignalComment_$0 = string;
export type SignalComment_$1 = string;
export type SignalComment_$2 = string;
export class MessageComment {
    public kind: ASTKinds.MessageComment = ASTKinds.MessageComment;
    public raw_id: MessageComment_$0;
    public raw_comment: MessageComment_$1;
    public comment: string;
    public id: number;
    constructor(raw_id: MessageComment_$0, raw_comment: MessageComment_$1){
        this.raw_id = raw_id;
        this.raw_comment = raw_comment;
        this.comment = ((): string => {
        return cleanComment(raw_comment);
        })();
        this.id = ((): number => {
        return parseInt(raw_id,10);
        })();
    }
}
export type MessageComment_$0 = string;
export type MessageComment_$1 = string;
export class NodeComment {
    public kind: ASTKinds.NodeComment = ASTKinds.NodeComment;
    public name: NodeComment_$0;
    public raw_comment: NodeComment_$1;
    public comment: string;
    constructor(name: NodeComment_$0, raw_comment: NodeComment_$1){
        this.name = name;
        this.raw_comment = raw_comment;
        this.comment = ((): string => {
        return cleanComment(raw_comment);
        })();
    }
}
export type NodeComment_$0 = string;
export type NodeComment_$1 = string;
export class GlobalAttribute {
    public kind: ASTKinds.GlobalAttribute = ASTKinds.GlobalAttribute;
    public name: GlobalAttribute_$0;
    public type: GlobalAttribute_$1;
    public raw_value: GlobalAttribute_$2;
    public min: number;
    public max: number;
    public enum: string[];
    constructor(name: GlobalAttribute_$0, type: GlobalAttribute_$1, raw_value: GlobalAttribute_$2){
        this.name = name;
        this.type = type;
        this.raw_value = raw_value;
        this.min = ((): number => {
        return extractMinVal(type, raw_value);
        })();
        this.max = ((): number => {
        return extractMaxVal(type, raw_value);
        })();
        this.enum = ((): string[] => {
        return extractOptions(type, raw_value);
        })();
    }
}
export type GlobalAttribute_$0 = string;
export type GlobalAttribute_$1 = string;
export type GlobalAttribute_$2 = string;
export class MessageAttribute {
    public kind: ASTKinds.MessageAttribute = ASTKinds.MessageAttribute;
    public name: MessageAttribute_$0;
    public type: MessageAttribute_$1;
    public raw_value: MessageAttribute_$2;
    public min: number;
    public max: number;
    public enum: string[];
    constructor(name: MessageAttribute_$0, type: MessageAttribute_$1, raw_value: MessageAttribute_$2){
        this.name = name;
        this.type = type;
        this.raw_value = raw_value;
        this.min = ((): number => {
        return extractMinVal(type, raw_value);
        })();
        this.max = ((): number => {
        return extractMaxVal(type, raw_value);
        })();
        this.enum = ((): string[] => {
        return extractOptions(type, raw_value);
        })();
    }
}
export type MessageAttribute_$0 = string;
export type MessageAttribute_$1 = string;
export type MessageAttribute_$2 = string;
export class EnvironmentAttribute {
    public kind: ASTKinds.EnvironmentAttribute = ASTKinds.EnvironmentAttribute;
    public name: EnvironmentAttribute_$0;
    public type: EnvironmentAttribute_$1;
    public raw_value: EnvironmentAttribute_$2;
    public min: number;
    public max: number;
    public enum: string[];
    constructor(name: EnvironmentAttribute_$0, type: EnvironmentAttribute_$1, raw_value: EnvironmentAttribute_$2){
        this.name = name;
        this.type = type;
        this.raw_value = raw_value;
        this.min = ((): number => {
        return extractMinVal(type, raw_value);
        })();
        this.max = ((): number => {
        return extractMaxVal(type, raw_value);
        })();
        this.enum = ((): string[] => {
        return extractOptions(type, raw_value);
        })();
    }
}
export type EnvironmentAttribute_$0 = string;
export type EnvironmentAttribute_$1 = string;
export type EnvironmentAttribute_$2 = string;
export class NodeAttribute {
    public kind: ASTKinds.NodeAttribute = ASTKinds.NodeAttribute;
    public name: NodeAttribute_$0;
    public type: NodeAttribute_$1;
    public raw_value: NodeAttribute_$2;
    public min: number;
    public max: number;
    public enum: string[];
    constructor(name: NodeAttribute_$0, type: NodeAttribute_$1, raw_value: NodeAttribute_$2){
        this.name = name;
        this.type = type;
        this.raw_value = raw_value;
        this.min = ((): number => {
        return extractMinVal(type, raw_value);
        })();
        this.max = ((): number => {
        return extractMaxVal(type, raw_value);
        })();
        this.enum = ((): string[] => {
        return extractOptions(type, raw_value);
        })();
    }
}
export type NodeAttribute_$0 = string;
export type NodeAttribute_$1 = string;
export type NodeAttribute_$2 = string;
export class SignalAttribute {
    public kind: ASTKinds.SignalAttribute = ASTKinds.SignalAttribute;
    public name: SignalAttribute_$0;
    public type: SignalAttribute_$1;
    public raw_value: SignalAttribute_$2;
    public min: number;
    public max: number;
    public enum: string[];
    constructor(name: SignalAttribute_$0, type: SignalAttribute_$1, raw_value: SignalAttribute_$2){
        this.name = name;
        this.type = type;
        this.raw_value = raw_value;
        this.min = ((): number => {
        return extractMinVal(type, raw_value);
        })();
        this.max = ((): number => {
        return extractMaxVal(type, raw_value);
        })();
        this.enum = ((): string[] => {
        return extractOptions(type, raw_value);
        })();
    }
}
export type SignalAttribute_$0 = string;
export type SignalAttribute_$1 = string;
export type SignalAttribute_$2 = string;
export class AttributeDefault {
    public kind: ASTKinds.AttributeDefault = ASTKinds.AttributeDefault;
    public name: AttributeDefault_$0;
    public raw_value: AttributeDefault_$1;
    public value: string;
    constructor(name: AttributeDefault_$0, raw_value: AttributeDefault_$1){
        this.name = name;
        this.raw_value = raw_value;
        this.value = ((): string => {
        return cleanComment(raw_value);
        })();
    }
}
export type AttributeDefault_$0 = string;
export type AttributeDefault_$1 = string;
export class AttributeValue {
    public kind: ASTKinds.AttributeValue = ASTKinds.AttributeValue;
    public name: AttributeValue_$0;
    public raw: AttributeValue_$1;
    public type: string;
    public node: string;
    public id: number;
    public signal: string;
    public value: string;
    constructor(name: AttributeValue_$0, raw: AttributeValue_$1){
        this.name = name;
        this.raw = raw;
        this.type = ((): string => {
        return extractAttrType(raw);
        })();
        this.node = ((): string => {
        return extractAttrNode(this.type,raw);
        })();
        this.id = ((): number => {
        return parseInt(extractAttrId(this.type,raw),10);
        })();
        this.signal = ((): string => {
        return extractAttrSignalName(this.type,raw);
        })();
        this.value = ((): string => {
        return extractAttrVal(this.type,raw);
        })();
    }
}
export type AttributeValue_$0 = string;
export type AttributeValue_$1 = string;
export class SigValType {
    public kind: ASTKinds.SigValType = ASTKinds.SigValType;
    public raw_id: SigValType_$0;
    public name: SigValType_$1;
    public raw_type: SigValType_$2;
    public id: number;
    public type: number;
    constructor(raw_id: SigValType_$0, name: SigValType_$1, raw_type: SigValType_$2){
        this.raw_id = raw_id;
        this.name = name;
        this.raw_type = raw_type;
        this.id = ((): number => {
        return parseInt(raw_id,10);
        })();
        this.type = ((): number => {
        return parseInt(raw_type,10);
        })();
    }
}
export type SigValType_$0 = string;
export type SigValType_$1 = string;
export type SigValType_$2 = string;
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
    }
    public matchChoice($$dpth: number, $$cr?: ErrorTracker): Nullable<Choice> {
        return this.choice<Choice>([
            () => this.matchChoice_1($$dpth + 1, $$cr),
            () => this.matchChoice_2($$dpth + 1, $$cr),
            () => this.matchChoice_3($$dpth + 1, $$cr),
            () => this.matchChoice_4($$dpth + 1, $$cr),
            () => this.matchChoice_5($$dpth + 1, $$cr),
            () => this.matchChoice_6($$dpth + 1, $$cr),
            () => this.matchChoice_7($$dpth + 1, $$cr),
            () => this.matchChoice_8($$dpth + 1, $$cr),
            () => this.matchChoice_9($$dpth + 1, $$cr),
            () => this.matchChoice_10($$dpth + 1, $$cr),
            () => this.matchChoice_11($$dpth + 1, $$cr),
            () => this.matchChoice_12($$dpth + 1, $$cr),
            () => this.matchChoice_13($$dpth + 1, $$cr),
            () => this.matchChoice_14($$dpth + 1, $$cr),
            () => this.matchChoice_15($$dpth + 1, $$cr),
            () => this.matchChoice_16($$dpth + 1, $$cr),
            () => this.matchChoice_17($$dpth + 1, $$cr),
            () => this.matchChoice_18($$dpth + 1, $$cr),
            () => this.matchChoice_19($$dpth + 1, $$cr),
            () => this.matchChoice_20($$dpth + 1, $$cr),
            () => this.matchChoice_21($$dpth + 1, $$cr),
            () => this.matchChoice_22($$dpth + 1, $$cr),
            () => this.matchChoice_23($$dpth + 1, $$cr),
            () => this.matchChoice_24($$dpth + 1, $$cr),
            () => this.matchChoice_25($$dpth + 1, $$cr),
            () => this.matchChoice_26($$dpth + 1, $$cr),
            () => this.matchChoice_27($$dpth + 1, $$cr),
            () => this.matchChoice_28($$dpth + 1, $$cr),
            () => this.matchChoice_29($$dpth + 1, $$cr),
        ]);
    }
    public matchChoice_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Choice_1> {
        return this.matchCanNode($$dpth + 1, $$cr);
    }
    public matchChoice_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Choice_2> {
        return this.matchCanMessage($$dpth + 1, $$cr);
    }
    public matchChoice_3($$dpth: number, $$cr?: ErrorTracker): Nullable<Choice_3> {
        return this.matchSignalMultiplexVal($$dpth + 1, $$cr);
    }
    public matchChoice_4($$dpth: number, $$cr?: ErrorTracker): Nullable<Choice_4> {
        return this.matchCanSignal($$dpth + 1, $$cr);
    }
    public matchChoice_5($$dpth: number, $$cr?: ErrorTracker): Nullable<Choice_5> {
        return this.matchValTable($$dpth + 1, $$cr);
    }
    public matchChoice_6($$dpth: number, $$cr?: ErrorTracker): Nullable<Choice_6> {
        return this.matchVal($$dpth + 1, $$cr);
    }
    public matchChoice_7($$dpth: number, $$cr?: ErrorTracker): Nullable<Choice_7> {
        return this.matchSignalComment($$dpth + 1, $$cr);
    }
    public matchChoice_8($$dpth: number, $$cr?: ErrorTracker): Nullable<Choice_8> {
        return this.matchMessageComment($$dpth + 1, $$cr);
    }
    public matchChoice_9($$dpth: number, $$cr?: ErrorTracker): Nullable<Choice_9> {
        return this.matchNodeComment($$dpth + 1, $$cr);
    }
    public matchChoice_10($$dpth: number, $$cr?: ErrorTracker): Nullable<Choice_10> {
        return this.matchGlobalAttribute($$dpth + 1, $$cr);
    }
    public matchChoice_11($$dpth: number, $$cr?: ErrorTracker): Nullable<Choice_11> {
        return this.matchMessageAttribute($$dpth + 1, $$cr);
    }
    public matchChoice_12($$dpth: number, $$cr?: ErrorTracker): Nullable<Choice_12> {
        return this.matchSignalAttribute($$dpth + 1, $$cr);
    }
    public matchChoice_13($$dpth: number, $$cr?: ErrorTracker): Nullable<Choice_13> {
        return this.matchNodeAttribute($$dpth + 1, $$cr);
    }
    public matchChoice_14($$dpth: number, $$cr?: ErrorTracker): Nullable<Choice_14> {
        return this.matchAttributeDefault($$dpth + 1, $$cr);
    }
    public matchChoice_15($$dpth: number, $$cr?: ErrorTracker): Nullable<Choice_15> {
        return this.matchAttributeValue($$dpth + 1, $$cr);
    }
    public matchChoice_16($$dpth: number, $$cr?: ErrorTracker): Nullable<Choice_16> {
        return this.matchVersion($$dpth + 1, $$cr);
    }
    public matchChoice_17($$dpth: number, $$cr?: ErrorTracker): Nullable<Choice_17> {
        return this.matchNewSymbolValue($$dpth + 1, $$cr);
    }
    public matchChoice_18($$dpth: number, $$cr?: ErrorTracker): Nullable<Choice_18> {
        return this.matchBlankLine($$dpth + 1, $$cr);
    }
    public matchChoice_19($$dpth: number, $$cr?: ErrorTracker): Nullable<Choice_19> {
        return this.matchNewSymbol($$dpth + 1, $$cr);
    }
    public matchChoice_20($$dpth: number, $$cr?: ErrorTracker): Nullable<Choice_20> {
        return this.matchBusSpeed($$dpth + 1, $$cr);
    }
    public matchChoice_21($$dpth: number, $$cr?: ErrorTracker): Nullable<Choice_21> {
        return this.matchComment($$dpth + 1, $$cr);
    }
    public matchChoice_22($$dpth: number, $$cr?: ErrorTracker): Nullable<Choice_22> {
        return this.matchCanEnvironmentVariable($$dpth + 1, $$cr);
    }
    public matchChoice_23($$dpth: number, $$cr?: ErrorTracker): Nullable<Choice_23> {
        return this.matchEnvironmentVarData($$dpth + 1, $$cr);
    }
    public matchChoice_24($$dpth: number, $$cr?: ErrorTracker): Nullable<Choice_24> {
        return this.matchEnvironmentVariableComment($$dpth + 1, $$cr);
    }
    public matchChoice_25($$dpth: number, $$cr?: ErrorTracker): Nullable<Choice_25> {
        return this.matchMessageTransmitter($$dpth + 1, $$cr);
    }
    public matchChoice_26($$dpth: number, $$cr?: ErrorTracker): Nullable<Choice_26> {
        return this.matchEnvironmentAttribute($$dpth + 1, $$cr);
    }
    public matchChoice_27($$dpth: number, $$cr?: ErrorTracker): Nullable<Choice_27> {
        return this.matchEnvironmentVal($$dpth + 1, $$cr);
    }
    public matchChoice_28($$dpth: number, $$cr?: ErrorTracker): Nullable<Choice_28> {
        return this.matchCanSignalGroup($$dpth + 1, $$cr);
    }
    public matchChoice_29($$dpth: number, $$cr?: ErrorTracker): Nullable<Choice_29> {
        return this.matchSigValType($$dpth + 1, $$cr);
    }
    public matchBlankLine($$dpth: number, $$cr?: ErrorTracker): Nullable<BlankLine> {
        return this.run<BlankLine>($$dpth,
            () => {
                let $$res: Nullable<BlankLine> = null;
                if (true
                    && this.regexAccept(String.raw`(?:)`, $$dpth + 1, $$cr) !== null
                    && this.match$EOF($$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.BlankLine, };
                }
                return $$res;
            });
    }
    public matchCanSignalGroup($$dpth: number, $$cr?: ErrorTracker): Nullable<CanSignalGroup> {
        return this.run<CanSignalGroup>($$dpth,
            () => {
                let $scope$raw_id: Nullable<CanSignalGroup_$0>;
                let $scope$name: Nullable<CanSignalGroup_$1>;
                let $scope$raw_group_number: Nullable<CanSignalGroup_$2>;
                let $scope$raw_signal_string: Nullable<CanSignalGroup_$3>;
                let $$res: Nullable<CanSignalGroup> = null;
                if (true
                    && this.regexAccept(String.raw`(?:SIG_GROUP_\s+)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_id = this.matchCanSignalGroup_$0($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\s+)`, $$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchCanSignalGroup_$1($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\s+)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_group_number = this.matchCanSignalGroup_$2($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\s+:\s*)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_signal_string = this.matchCanSignalGroup_$3($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\s*)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = new CanSignalGroup($scope$raw_id, $scope$name, $scope$raw_group_number, $scope$raw_signal_string);
                }
                return $$res;
            });
    }
    public matchCanSignalGroup_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<CanSignalGroup_$0> {
        return this.regexAccept(String.raw`(?:[0-9]+)`, $$dpth + 1, $$cr);
    }
    public matchCanSignalGroup_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<CanSignalGroup_$1> {
        return this.regexAccept(String.raw`(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    public matchCanSignalGroup_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<CanSignalGroup_$2> {
        return this.regexAccept(String.raw`(?:[0-9]+)`, $$dpth + 1, $$cr);
    }
    public matchCanSignalGroup_$3($$dpth: number, $$cr?: ErrorTracker): Nullable<CanSignalGroup_$3> {
        return this.regexAccept(String.raw`(?:[a-zA-Z0-9_\s]*)`, $$dpth + 1, $$cr);
    }
    public matchMessageTransmitter($$dpth: number, $$cr?: ErrorTracker): Nullable<MessageTransmitter> {
        return this.run<MessageTransmitter>($$dpth,
            () => {
                let $scope$raw_id: Nullable<MessageTransmitter_$0>;
                let $scope$raw_nodes: Nullable<MessageTransmitter_$1>;
                let $$res: Nullable<MessageTransmitter> = null;
                if (true
                    && this.regexAccept(String.raw`(?:BO_TX_BU_\s+)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_id = this.matchMessageTransmitter_$0($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\s*:\s*)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_nodes = this.matchMessageTransmitter_$1($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new MessageTransmitter($scope$raw_id, $scope$raw_nodes);
                }
                return $$res;
            });
    }
    public matchMessageTransmitter_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<MessageTransmitter_$0> {
        return this.regexAccept(String.raw`(?:[0-9]+)`, $$dpth + 1, $$cr);
    }
    public matchMessageTransmitter_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<MessageTransmitter_$1> {
        return this.regexAccept(String.raw`(?:.*)`, $$dpth + 1, $$cr);
    }
    public matchCanEnvironmentVariable($$dpth: number, $$cr?: ErrorTracker): Nullable<CanEnvironmentVariable> {
        return this.run<CanEnvironmentVariable>($$dpth,
            () => {
                let $scope$name: Nullable<CanEnvironmentVariable_$0>;
                let $scope$type: Nullable<CanEnvironmentVariable_$1>;
                let $scope$raw_min: Nullable<CanEnvironmentVariable_$2>;
                let $scope$raw_max: Nullable<CanEnvironmentVariable_$3>;
                let $scope$raw_unit: Nullable<CanEnvironmentVariable_$4>;
                let $scope$raw_inital_value: Nullable<CanEnvironmentVariable_$5>;
                let $scope$raw_ev_id: Nullable<CanEnvironmentVariable_$6>;
                let $scope$access_type: Nullable<CanEnvironmentVariable_$7>;
                let $scope$node: Nullable<CanEnvironmentVariable_$8>;
                let $$res: Nullable<CanEnvironmentVariable> = null;
                if (true
                    && this.regexAccept(String.raw`(?:EV_\s+)`, $$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchCanEnvironmentVariable_$0($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\s*:\s*)`, $$dpth + 1, $$cr) !== null
                    && ($scope$type = this.matchCanEnvironmentVariable_$1($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\s+\[)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_min = this.matchCanEnvironmentVariable_$2($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\|)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_max = this.matchCanEnvironmentVariable_$3($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\]\s)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_unit = this.matchCanEnvironmentVariable_$4($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\s+)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_inital_value = this.matchCanEnvironmentVariable_$5($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\s+)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_ev_id = this.matchCanEnvironmentVariable_$6($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\s+)`, $$dpth + 1, $$cr) !== null
                    && ($scope$access_type = this.matchCanEnvironmentVariable_$7($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\s+)`, $$dpth + 1, $$cr) !== null
                    && ($scope$node = this.matchCanEnvironmentVariable_$8($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new CanEnvironmentVariable($scope$name, $scope$type, $scope$raw_min, $scope$raw_max, $scope$raw_unit, $scope$raw_inital_value, $scope$raw_ev_id, $scope$access_type, $scope$node);
                }
                return $$res;
            });
    }
    public matchCanEnvironmentVariable_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<CanEnvironmentVariable_$0> {
        return this.regexAccept(String.raw`(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    public matchCanEnvironmentVariable_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<CanEnvironmentVariable_$1> {
        return this.regexAccept(String.raw`(?:0|1|2)`, $$dpth + 1, $$cr);
    }
    public matchCanEnvironmentVariable_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<CanEnvironmentVariable_$2> {
        return this.regexAccept(String.raw`(?:[\-0-9.]+)`, $$dpth + 1, $$cr);
    }
    public matchCanEnvironmentVariable_$3($$dpth: number, $$cr?: ErrorTracker): Nullable<CanEnvironmentVariable_$3> {
        return this.regexAccept(String.raw`(?:[\-0-9.]+)`, $$dpth + 1, $$cr);
    }
    public matchCanEnvironmentVariable_$4($$dpth: number, $$cr?: ErrorTracker): Nullable<CanEnvironmentVariable_$4> {
        return this.regexAccept(String.raw`(?:".*")`, $$dpth + 1, $$cr);
    }
    public matchCanEnvironmentVariable_$5($$dpth: number, $$cr?: ErrorTracker): Nullable<CanEnvironmentVariable_$5> {
        return this.regexAccept(String.raw`(?:[\-0-9.]+)`, $$dpth + 1, $$cr);
    }
    public matchCanEnvironmentVariable_$6($$dpth: number, $$cr?: ErrorTracker): Nullable<CanEnvironmentVariable_$6> {
        return this.regexAccept(String.raw`(?:[0-9]+)`, $$dpth + 1, $$cr);
    }
    public matchCanEnvironmentVariable_$7($$dpth: number, $$cr?: ErrorTracker): Nullable<CanEnvironmentVariable_$7> {
        return this.regexAccept(String.raw`(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    public matchCanEnvironmentVariable_$8($$dpth: number, $$cr?: ErrorTracker): Nullable<CanEnvironmentVariable_$8> {
        return this.regexAccept(String.raw`(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    public matchEnvironmentVarData($$dpth: number, $$cr?: ErrorTracker): Nullable<EnvironmentVarData> {
        return this.run<EnvironmentVarData>($$dpth,
            () => {
                let $scope$name: Nullable<EnvironmentVarData_$0>;
                let $scope$raw_value: Nullable<EnvironmentVarData_$1>;
                let $$res: Nullable<EnvironmentVarData> = null;
                if (true
                    && this.regexAccept(String.raw`(?:ENVVAR_DATA_\s+)`, $$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchEnvironmentVarData_$0($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\s*:\s*)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_value = this.matchEnvironmentVarData_$1($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new EnvironmentVarData($scope$name, $scope$raw_value);
                }
                return $$res;
            });
    }
    public matchEnvironmentVarData_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<EnvironmentVarData_$0> {
        return this.regexAccept(String.raw`(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    public matchEnvironmentVarData_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<EnvironmentVarData_$1> {
        return this.regexAccept(String.raw`(?:[0-9]+)`, $$dpth + 1, $$cr);
    }
    public matchEnvironmentVariableComment($$dpth: number, $$cr?: ErrorTracker): Nullable<EnvironmentVariableComment> {
        return this.run<EnvironmentVariableComment>($$dpth,
            () => {
                let $scope$name: Nullable<EnvironmentVariableComment_$0>;
                let $scope$raw_comment: Nullable<EnvironmentVariableComment_$1>;
                let $$res: Nullable<EnvironmentVariableComment> = null;
                if (true
                    && this.regexAccept(String.raw`(?:CM_ EV_\s+)`, $$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchEnvironmentVariableComment_$0($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\s)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_comment = this.matchEnvironmentVariableComment_$1($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new EnvironmentVariableComment($scope$name, $scope$raw_comment);
                }
                return $$res;
            });
    }
    public matchEnvironmentVariableComment_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<EnvironmentVariableComment_$0> {
        return this.regexAccept(String.raw`(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    public matchEnvironmentVariableComment_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<EnvironmentVariableComment_$1> {
        return this.regexAccept(String.raw`(?:.*)`, $$dpth + 1, $$cr);
    }
    public matchVersion($$dpth: number, $$cr?: ErrorTracker): Nullable<Version> {
        return this.run<Version>($$dpth,
            () => {
                let $scope$raw_version: Nullable<Version_$0>;
                let $$res: Nullable<Version> = null;
                if (true
                    && this.regexAccept(String.raw`(?:VERSION)`, $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\s+)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_version = this.matchVersion_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new Version($scope$raw_version);
                }
                return $$res;
            });
    }
    public matchVersion_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<Version_$0> {
        return this.regexAccept(String.raw`(?:.*)`, $$dpth + 1, $$cr);
    }
    public matchNewSymbol($$dpth: number, $$cr?: ErrorTracker): Nullable<NewSymbol> {
        return this.regexAccept(String.raw`(?:NS_\s*:)`, $$dpth + 1, $$cr);
    }
    public matchBusSpeed($$dpth: number, $$cr?: ErrorTracker): Nullable<BusSpeed> {
        return this.regexAccept(String.raw`(?:BS_:)`, $$dpth + 1, $$cr);
    }
    public matchNewSymbolValue($$dpth: number, $$cr?: ErrorTracker): Nullable<NewSymbolValue> {
        return this.run<NewSymbolValue>($$dpth,
            () => {
                let $scope$symbol: Nullable<NewSymbolValue_$0>;
                let $$res: Nullable<NewSymbolValue> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\s+)`, $$dpth + 1, $$cr) !== null
                    && ($scope$symbol = this.matchNewSymbolValue_$0($$dpth + 1, $$cr)) !== null
                    && ((this.regexAccept(String.raw`(?:$)`, $$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.NewSymbolValue, symbol: $scope$symbol};
                }
                return $$res;
            });
    }
    public matchNewSymbolValue_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<NewSymbolValue_$0> {
        return this.regexAccept(String.raw`(?:[a-zA-Z_]+_)`, $$dpth + 1, $$cr);
    }
    public matchCanNode($$dpth: number, $$cr?: ErrorTracker): Nullable<CanNode> {
        return this.run<CanNode>($$dpth,
            () => {
                let $scope$raw_node_string: Nullable<CanNode_$0>;
                let $$res: Nullable<CanNode> = null;
                if (true
                    && this.regexAccept(String.raw`(?:BU_:\s*)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_node_string = this.matchCanNode_$0($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\s*)`, $$dpth + 1, $$cr) !== null
                    && ((this.regexAccept(String.raw`(?:;)`, $$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new CanNode($scope$raw_node_string);
                }
                return $$res;
            });
    }
    public matchCanNode_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<CanNode_$0> {
        return this.regexAccept(String.raw`(?:[a-zA-Z0-9_\s]*)`, $$dpth + 1, $$cr);
    }
    public matchCanMessage($$dpth: number, $$cr?: ErrorTracker): Nullable<CanMessage> {
        return this.run<CanMessage>($$dpth,
            () => {
                let $scope$raw_id: Nullable<CanMessage_$0>;
                let $scope$name: Nullable<CanMessage_$1>;
                let $scope$raw_dlc: Nullable<CanMessage_$2>;
                let $scope$node: Nullable<CanMessage_$3>;
                let $$res: Nullable<CanMessage> = null;
                if (true
                    && this.regexAccept(String.raw`(?:BO_\s)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_id = this.matchCanMessage_$0($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\s*)`, $$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchCanMessage_$1($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?::\s*)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_dlc = this.matchCanMessage_$2($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\s*)`, $$dpth + 1, $$cr) !== null
                    && ($scope$node = this.matchCanMessage_$3($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new CanMessage($scope$raw_id, $scope$name, $scope$raw_dlc, $scope$node);
                }
                return $$res;
            });
    }
    public matchCanMessage_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<CanMessage_$0> {
        return this.regexAccept(String.raw`(?:[0-9]+)`, $$dpth + 1, $$cr);
    }
    public matchCanMessage_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<CanMessage_$1> {
        return this.regexAccept(String.raw`(?:[a-zA-Z0-9_]*)`, $$dpth + 1, $$cr);
    }
    public matchCanMessage_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<CanMessage_$2> {
        return this.regexAccept(String.raw`(?:[0-9])`, $$dpth + 1, $$cr);
    }
    public matchCanMessage_$3($$dpth: number, $$cr?: ErrorTracker): Nullable<CanMessage_$3> {
        return this.regexAccept(String.raw`(?:[a-zA-Z0-9_]*)`, $$dpth + 1, $$cr);
    }
    public matchCanSignal($$dpth: number, $$cr?: ErrorTracker): Nullable<CanSignal> {
        return this.run<CanSignal>($$dpth,
            () => {
                let $scope$name: Nullable<CanSignal_$0>;
                let $scope$multiplex: Nullable<CanSignal_$1>;
                let $scope$raw_start_bit: Nullable<CanSignal_$2>;
                let $scope$raw_length: Nullable<CanSignal_$3>;
                let $scope$raw_endian: Nullable<CanSignal_$4>;
                let $scope$raw_signed: Nullable<CanSignal_$5>;
                let $scope$raw_factor: Nullable<CanSignal_$6>;
                let $scope$raw_offset: Nullable<CanSignal_$7>;
                let $scope$raw_min: Nullable<CanSignal_$8>;
                let $scope$raw_max: Nullable<CanSignal_$9>;
                let $scope$raw_unit: Nullable<CanSignal_$10>;
                let $scope$raw_node_str: Nullable<CanSignal_$11>;
                let $$res: Nullable<CanSignal> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\s*SG_\s)`, $$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchCanSignal_$0($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\s*)`, $$dpth + 1, $$cr) !== null
                    && ($scope$multiplex = this.matchCanSignal_$1($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\s*:\s)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_start_bit = this.matchCanSignal_$2($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\|)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_length = this.matchCanSignal_$3($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:@)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_endian = this.matchCanSignal_$4($$dpth + 1, $$cr)) !== null
                    && ($scope$raw_signed = this.matchCanSignal_$5($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\s\()`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_factor = this.matchCanSignal_$6($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_offset = this.matchCanSignal_$7($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\)\s\[)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_min = this.matchCanSignal_$8($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\|)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_max = this.matchCanSignal_$9($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\]\s)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_unit = this.matchCanSignal_$10($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\s)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_node_str = this.matchCanSignal_$11($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new CanSignal($scope$name, $scope$multiplex, $scope$raw_start_bit, $scope$raw_length, $scope$raw_endian, $scope$raw_signed, $scope$raw_factor, $scope$raw_offset, $scope$raw_min, $scope$raw_max, $scope$raw_unit, $scope$raw_node_str);
                }
                return $$res;
            });
    }
    public matchCanSignal_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<CanSignal_$0> {
        return this.regexAccept(String.raw`(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    public matchCanSignal_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<CanSignal_$1> {
        return this.regexAccept(String.raw`(?:M|[m0-9M]*|\s)`, $$dpth + 1, $$cr);
    }
    public matchCanSignal_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<CanSignal_$2> {
        return this.regexAccept(String.raw`(?:[0-9]+)`, $$dpth + 1, $$cr);
    }
    public matchCanSignal_$3($$dpth: number, $$cr?: ErrorTracker): Nullable<CanSignal_$3> {
        return this.regexAccept(String.raw`(?:[0-9]+)`, $$dpth + 1, $$cr);
    }
    public matchCanSignal_$4($$dpth: number, $$cr?: ErrorTracker): Nullable<CanSignal_$4> {
        return this.regexAccept(String.raw`(?:[1|0])`, $$dpth + 1, $$cr);
    }
    public matchCanSignal_$5($$dpth: number, $$cr?: ErrorTracker): Nullable<CanSignal_$5> {
        return this.regexAccept(String.raw`(?:[+|-])`, $$dpth + 1, $$cr);
    }
    public matchCanSignal_$6($$dpth: number, $$cr?: ErrorTracker): Nullable<CanSignal_$6> {
        return this.regexAccept(String.raw`(?:[\-0-9.]+)`, $$dpth + 1, $$cr);
    }
    public matchCanSignal_$7($$dpth: number, $$cr?: ErrorTracker): Nullable<CanSignal_$7> {
        return this.regexAccept(String.raw`(?:[\-0-9.]+)`, $$dpth + 1, $$cr);
    }
    public matchCanSignal_$8($$dpth: number, $$cr?: ErrorTracker): Nullable<CanSignal_$8> {
        return this.regexAccept(String.raw`(?:[\-0-9.]+)`, $$dpth + 1, $$cr);
    }
    public matchCanSignal_$9($$dpth: number, $$cr?: ErrorTracker): Nullable<CanSignal_$9> {
        return this.regexAccept(String.raw`(?:[\-0-9.]+)`, $$dpth + 1, $$cr);
    }
    public matchCanSignal_$10($$dpth: number, $$cr?: ErrorTracker): Nullable<CanSignal_$10> {
        return this.regexAccept(String.raw`(?:".*")`, $$dpth + 1, $$cr);
    }
    public matchCanSignal_$11($$dpth: number, $$cr?: ErrorTracker): Nullable<CanSignal_$11> {
        return this.regexAccept(String.raw`(?:.*)`, $$dpth + 1, $$cr);
    }
    public matchSignalMultiplexVal($$dpth: number, $$cr?: ErrorTracker): Nullable<SignalMultiplexVal> {
        return this.run<SignalMultiplexVal>($$dpth,
            () => {
                let $scope$raw_id: Nullable<SignalMultiplexVal_$0>;
                let $scope$name: Nullable<SignalMultiplexVal_$1>;
                let $scope$switch_name: Nullable<SignalMultiplexVal_$2>;
                let $scope$raw_value_ranges: Nullable<SignalMultiplexVal_$3>;
                let $$res: Nullable<SignalMultiplexVal> = null;
                if (true
                    && this.regexAccept(String.raw`(?:SG_MUL_VAL_\s)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_id = this.matchSignalMultiplexVal_$0($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\s*)`, $$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchSignalMultiplexVal_$1($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\s*)`, $$dpth + 1, $$cr) !== null
                    && ($scope$switch_name = this.matchSignalMultiplexVal_$2($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\s*)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_value_ranges = this.matchSignalMultiplexVal_$3($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new SignalMultiplexVal($scope$raw_id, $scope$name, $scope$switch_name, $scope$raw_value_ranges);
                }
                return $$res;
            });
    }
    public matchSignalMultiplexVal_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<SignalMultiplexVal_$0> {
        return this.regexAccept(String.raw`(?:[0-9]+)`, $$dpth + 1, $$cr);
    }
    public matchSignalMultiplexVal_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<SignalMultiplexVal_$1> {
        return this.regexAccept(String.raw`(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    public matchSignalMultiplexVal_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<SignalMultiplexVal_$2> {
        return this.regexAccept(String.raw`(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    public matchSignalMultiplexVal_$3($$dpth: number, $$cr?: ErrorTracker): Nullable<SignalMultiplexVal_$3> {
        return this.regexAccept(String.raw`(?:[0-9-,\s]+;)`, $$dpth + 1, $$cr);
    }
    public matchValTable($$dpth: number, $$cr?: ErrorTracker): Nullable<ValTable> {
        return this.run<ValTable>($$dpth,
            () => {
                let $scope$name: Nullable<ValTable_$0>;
                let $scope$raw_table: Nullable<ValTable_$1>;
                let $$res: Nullable<ValTable> = null;
                if (true
                    && this.regexAccept(String.raw`(?:VAL_TABLE_\s)`, $$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchValTable_$0($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\s)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_table = this.matchValTable_$1($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new ValTable($scope$name, $scope$raw_table);
                }
                return $$res;
            });
    }
    public matchValTable_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<ValTable_$0> {
        return this.regexAccept(String.raw`(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    public matchValTable_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<ValTable_$1> {
        return this.regexAccept(String.raw`(?:.*)`, $$dpth + 1, $$cr);
    }
    public matchVal($$dpth: number, $$cr?: ErrorTracker): Nullable<Val> {
        return this.run<Val>($$dpth,
            () => {
                let $scope$raw_id: Nullable<Val_$0>;
                let $scope$name: Nullable<Val_$1>;
                let $scope$raw_table: Nullable<Val_$2>;
                let $$res: Nullable<Val> = null;
                if (true
                    && this.regexAccept(String.raw`(?:VAL_\s)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_id = this.matchVal_$0($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\s)`, $$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchVal_$1($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\s)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_table = this.matchVal_$2($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new Val($scope$raw_id, $scope$name, $scope$raw_table);
                }
                return $$res;
            });
    }
    public matchVal_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<Val_$0> {
        return this.regexAccept(String.raw`(?:[0-9]+)`, $$dpth + 1, $$cr);
    }
    public matchVal_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<Val_$1> {
        return this.regexAccept(String.raw`(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    public matchVal_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<Val_$2> {
        return this.regexAccept(String.raw`(?:.*)`, $$dpth + 1, $$cr);
    }
    public matchEnvironmentVal($$dpth: number, $$cr?: ErrorTracker): Nullable<EnvironmentVal> {
        return this.run<EnvironmentVal>($$dpth,
            () => {
                let $scope$name: Nullable<EnvironmentVal_$0>;
                let $scope$raw_table: Nullable<EnvironmentVal_$1>;
                let $$res: Nullable<EnvironmentVal> = null;
                if (true
                    && this.regexAccept(String.raw`(?:VAL_\s)`, $$dpth + 1, $$cr) !== null
                    && this.negate(() => this.regexAccept(String.raw`(?:0-9)`, $$dpth + 1, $$cr)) !== null
                    && ($scope$name = this.matchEnvironmentVal_$0($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\s)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_table = this.matchEnvironmentVal_$1($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new EnvironmentVal($scope$name, $scope$raw_table);
                }
                return $$res;
            });
    }
    public matchEnvironmentVal_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<EnvironmentVal_$0> {
        return this.regexAccept(String.raw`(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    public matchEnvironmentVal_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<EnvironmentVal_$1> {
        return this.regexAccept(String.raw`(?:.*)`, $$dpth + 1, $$cr);
    }
    public matchComment($$dpth: number, $$cr?: ErrorTracker): Nullable<Comment> {
        return this.run<Comment>($$dpth,
            () => {
                let $scope$raw_comment: Nullable<Comment_$0>;
                let $$res: Nullable<Comment> = null;
                if (true
                    && this.regexAccept(String.raw`(?:CM_\s)`, $$dpth + 1, $$cr) !== null
                    && this.negate(() => this.regexAccept(String.raw`(?:[SG_|BO_|BU_|EV_])`, $$dpth + 1, $$cr)) !== null
                    && ($scope$raw_comment = this.matchComment_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new Comment($scope$raw_comment);
                }
                return $$res;
            });
    }
    public matchComment_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<Comment_$0> {
        return this.regexAccept(String.raw`(?:.*)`, $$dpth + 1, $$cr);
    }
    public matchSignalComment($$dpth: number, $$cr?: ErrorTracker): Nullable<SignalComment> {
        return this.run<SignalComment>($$dpth,
            () => {
                let $scope$raw_id: Nullable<SignalComment_$0>;
                let $scope$name: Nullable<SignalComment_$1>;
                let $scope$raw_comment: Nullable<SignalComment_$2>;
                let $$res: Nullable<SignalComment> = null;
                if (true
                    && this.regexAccept(String.raw`(?:CM_ SG_\s)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_id = this.matchSignalComment_$0($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\s)`, $$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchSignalComment_$1($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\s)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_comment = this.matchSignalComment_$2($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new SignalComment($scope$raw_id, $scope$name, $scope$raw_comment);
                }
                return $$res;
            });
    }
    public matchSignalComment_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<SignalComment_$0> {
        return this.regexAccept(String.raw`(?:[0-9]+)`, $$dpth + 1, $$cr);
    }
    public matchSignalComment_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<SignalComment_$1> {
        return this.regexAccept(String.raw`(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    public matchSignalComment_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<SignalComment_$2> {
        return this.regexAccept(String.raw`(?:.*)`, $$dpth + 1, $$cr);
    }
    public matchMessageComment($$dpth: number, $$cr?: ErrorTracker): Nullable<MessageComment> {
        return this.run<MessageComment>($$dpth,
            () => {
                let $scope$raw_id: Nullable<MessageComment_$0>;
                let $scope$raw_comment: Nullable<MessageComment_$1>;
                let $$res: Nullable<MessageComment> = null;
                if (true
                    && this.regexAccept(String.raw`(?:CM_ BO_\s)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_id = this.matchMessageComment_$0($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\s)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_comment = this.matchMessageComment_$1($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new MessageComment($scope$raw_id, $scope$raw_comment);
                }
                return $$res;
            });
    }
    public matchMessageComment_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<MessageComment_$0> {
        return this.regexAccept(String.raw`(?:[0-9]+)`, $$dpth + 1, $$cr);
    }
    public matchMessageComment_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<MessageComment_$1> {
        return this.regexAccept(String.raw`(?:.*)`, $$dpth + 1, $$cr);
    }
    public matchNodeComment($$dpth: number, $$cr?: ErrorTracker): Nullable<NodeComment> {
        return this.run<NodeComment>($$dpth,
            () => {
                let $scope$name: Nullable<NodeComment_$0>;
                let $scope$raw_comment: Nullable<NodeComment_$1>;
                let $$res: Nullable<NodeComment> = null;
                if (true
                    && this.regexAccept(String.raw`(?:CM_ BU_\s)`, $$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchNodeComment_$0($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\s)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_comment = this.matchNodeComment_$1($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new NodeComment($scope$name, $scope$raw_comment);
                }
                return $$res;
            });
    }
    public matchNodeComment_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<NodeComment_$0> {
        return this.regexAccept(String.raw`(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    public matchNodeComment_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<NodeComment_$1> {
        return this.regexAccept(String.raw`(?:.*)`, $$dpth + 1, $$cr);
    }
    public matchGlobalAttribute($$dpth: number, $$cr?: ErrorTracker): Nullable<GlobalAttribute> {
        return this.run<GlobalAttribute>($$dpth,
            () => {
                let $scope$name: Nullable<GlobalAttribute_$0>;
                let $scope$type: Nullable<GlobalAttribute_$1>;
                let $scope$raw_value: Nullable<GlobalAttribute_$2>;
                let $$res: Nullable<GlobalAttribute> = null;
                if (true
                    && this.regexAccept(String.raw`(?:BA_DEF_\s+)`, $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:")`, $$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchGlobalAttribute_$0($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:")`, $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\s)`, $$dpth + 1, $$cr) !== null
                    && ($scope$type = this.matchGlobalAttribute_$1($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\s)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_value = this.matchGlobalAttribute_$2($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new GlobalAttribute($scope$name, $scope$type, $scope$raw_value);
                }
                return $$res;
            });
    }
    public matchGlobalAttribute_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<GlobalAttribute_$0> {
        return this.regexAccept(String.raw`(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    public matchGlobalAttribute_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<GlobalAttribute_$1> {
        return this.regexAccept(String.raw`(?:[A-Z]+)`, $$dpth + 1, $$cr);
    }
    public matchGlobalAttribute_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<GlobalAttribute_$2> {
        return this.regexAccept(String.raw`(?:.*)`, $$dpth + 1, $$cr);
    }
    public matchMessageAttribute($$dpth: number, $$cr?: ErrorTracker): Nullable<MessageAttribute> {
        return this.run<MessageAttribute>($$dpth,
            () => {
                let $scope$name: Nullable<MessageAttribute_$0>;
                let $scope$type: Nullable<MessageAttribute_$1>;
                let $scope$raw_value: Nullable<MessageAttribute_$2>;
                let $$res: Nullable<MessageAttribute> = null;
                if (true
                    && this.regexAccept(String.raw`(?:BA_DEF_ BO_\s+)`, $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:")`, $$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchMessageAttribute_$0($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:")`, $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\s)`, $$dpth + 1, $$cr) !== null
                    && ($scope$type = this.matchMessageAttribute_$1($$dpth + 1, $$cr)) !== null
                    && ((this.regexAccept(String.raw`(?:\s)`, $$dpth + 1, $$cr)) || true)
                    && ($scope$raw_value = this.matchMessageAttribute_$2($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new MessageAttribute($scope$name, $scope$type, $scope$raw_value);
                }
                return $$res;
            });
    }
    public matchMessageAttribute_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<MessageAttribute_$0> {
        return this.regexAccept(String.raw`(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    public matchMessageAttribute_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<MessageAttribute_$1> {
        return this.regexAccept(String.raw`(?:[A-Z]+)`, $$dpth + 1, $$cr);
    }
    public matchMessageAttribute_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<MessageAttribute_$2> {
        return this.regexAccept(String.raw`(?:.*)`, $$dpth + 1, $$cr);
    }
    public matchEnvironmentAttribute($$dpth: number, $$cr?: ErrorTracker): Nullable<EnvironmentAttribute> {
        return this.run<EnvironmentAttribute>($$dpth,
            () => {
                let $scope$name: Nullable<EnvironmentAttribute_$0>;
                let $scope$type: Nullable<EnvironmentAttribute_$1>;
                let $scope$raw_value: Nullable<EnvironmentAttribute_$2>;
                let $$res: Nullable<EnvironmentAttribute> = null;
                if (true
                    && this.regexAccept(String.raw`(?:BA_DEF_ EV_\s+)`, $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:")`, $$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchEnvironmentAttribute_$0($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:")`, $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\s)`, $$dpth + 1, $$cr) !== null
                    && ($scope$type = this.matchEnvironmentAttribute_$1($$dpth + 1, $$cr)) !== null
                    && ((this.regexAccept(String.raw`(?:\s)`, $$dpth + 1, $$cr)) || true)
                    && ($scope$raw_value = this.matchEnvironmentAttribute_$2($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new EnvironmentAttribute($scope$name, $scope$type, $scope$raw_value);
                }
                return $$res;
            });
    }
    public matchEnvironmentAttribute_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<EnvironmentAttribute_$0> {
        return this.regexAccept(String.raw`(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    public matchEnvironmentAttribute_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<EnvironmentAttribute_$1> {
        return this.regexAccept(String.raw`(?:[A-Z]+)`, $$dpth + 1, $$cr);
    }
    public matchEnvironmentAttribute_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<EnvironmentAttribute_$2> {
        return this.regexAccept(String.raw`(?:.*)`, $$dpth + 1, $$cr);
    }
    public matchNodeAttribute($$dpth: number, $$cr?: ErrorTracker): Nullable<NodeAttribute> {
        return this.run<NodeAttribute>($$dpth,
            () => {
                let $scope$name: Nullable<NodeAttribute_$0>;
                let $scope$type: Nullable<NodeAttribute_$1>;
                let $scope$raw_value: Nullable<NodeAttribute_$2>;
                let $$res: Nullable<NodeAttribute> = null;
                if (true
                    && this.regexAccept(String.raw`(?:BA_DEF_ BU_\s+)`, $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:")`, $$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchNodeAttribute_$0($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:")`, $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\s)`, $$dpth + 1, $$cr) !== null
                    && ($scope$type = this.matchNodeAttribute_$1($$dpth + 1, $$cr)) !== null
                    && ((this.regexAccept(String.raw`(?:\s)`, $$dpth + 1, $$cr)) || true)
                    && ($scope$raw_value = this.matchNodeAttribute_$2($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new NodeAttribute($scope$name, $scope$type, $scope$raw_value);
                }
                return $$res;
            });
    }
    public matchNodeAttribute_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<NodeAttribute_$0> {
        return this.regexAccept(String.raw`(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    public matchNodeAttribute_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<NodeAttribute_$1> {
        return this.regexAccept(String.raw`(?:[A-Z]+)`, $$dpth + 1, $$cr);
    }
    public matchNodeAttribute_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<NodeAttribute_$2> {
        return this.regexAccept(String.raw`(?:.*)`, $$dpth + 1, $$cr);
    }
    public matchSignalAttribute($$dpth: number, $$cr?: ErrorTracker): Nullable<SignalAttribute> {
        return this.run<SignalAttribute>($$dpth,
            () => {
                let $scope$name: Nullable<SignalAttribute_$0>;
                let $scope$type: Nullable<SignalAttribute_$1>;
                let $scope$raw_value: Nullable<SignalAttribute_$2>;
                let $$res: Nullable<SignalAttribute> = null;
                if (true
                    && this.regexAccept(String.raw`(?:BA_DEF_ SG_\s+)`, $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:")`, $$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchSignalAttribute_$0($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:")`, $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\s)`, $$dpth + 1, $$cr) !== null
                    && ($scope$type = this.matchSignalAttribute_$1($$dpth + 1, $$cr)) !== null
                    && ((this.regexAccept(String.raw`(?:\s)`, $$dpth + 1, $$cr)) || true)
                    && ($scope$raw_value = this.matchSignalAttribute_$2($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new SignalAttribute($scope$name, $scope$type, $scope$raw_value);
                }
                return $$res;
            });
    }
    public matchSignalAttribute_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<SignalAttribute_$0> {
        return this.regexAccept(String.raw`(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    public matchSignalAttribute_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<SignalAttribute_$1> {
        return this.regexAccept(String.raw`(?:[A-Z]+)`, $$dpth + 1, $$cr);
    }
    public matchSignalAttribute_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<SignalAttribute_$2> {
        return this.regexAccept(String.raw`(?:.*)`, $$dpth + 1, $$cr);
    }
    public matchAttributeDefault($$dpth: number, $$cr?: ErrorTracker): Nullable<AttributeDefault> {
        return this.run<AttributeDefault>($$dpth,
            () => {
                let $scope$name: Nullable<AttributeDefault_$0>;
                let $scope$raw_value: Nullable<AttributeDefault_$1>;
                let $$res: Nullable<AttributeDefault> = null;
                if (true
                    && this.regexAccept(String.raw`(?:BA_DEF_DEF_\s+)`, $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:")`, $$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchAttributeDefault_$0($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:")`, $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\s)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_value = this.matchAttributeDefault_$1($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new AttributeDefault($scope$name, $scope$raw_value);
                }
                return $$res;
            });
    }
    public matchAttributeDefault_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<AttributeDefault_$0> {
        return this.regexAccept(String.raw`(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    public matchAttributeDefault_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<AttributeDefault_$1> {
        return this.regexAccept(String.raw`(?:.*)`, $$dpth + 1, $$cr);
    }
    public matchAttributeValue($$dpth: number, $$cr?: ErrorTracker): Nullable<AttributeValue> {
        return this.run<AttributeValue>($$dpth,
            () => {
                let $scope$name: Nullable<AttributeValue_$0>;
                let $scope$raw: Nullable<AttributeValue_$1>;
                let $$res: Nullable<AttributeValue> = null;
                if (true
                    && this.regexAccept(String.raw`(?:BA_\s+)`, $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:")`, $$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchAttributeValue_$0($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:")`, $$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\s)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw = this.matchAttributeValue_$1($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new AttributeValue($scope$name, $scope$raw);
                }
                return $$res;
            });
    }
    public matchAttributeValue_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<AttributeValue_$0> {
        return this.regexAccept(String.raw`(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    public matchAttributeValue_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<AttributeValue_$1> {
        return this.regexAccept(String.raw`(?:.*)`, $$dpth + 1, $$cr);
    }
    public matchSigValType($$dpth: number, $$cr?: ErrorTracker): Nullable<SigValType> {
        return this.run<SigValType>($$dpth,
            () => {
                let $scope$raw_id: Nullable<SigValType_$0>;
                let $scope$name: Nullable<SigValType_$1>;
                let $scope$raw_type: Nullable<SigValType_$2>;
                let $$res: Nullable<SigValType> = null;
                if (true
                    && this.regexAccept(String.raw`(?:SIG_VALTYPE_\s+)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_id = this.matchSigValType_$0($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\s+)`, $$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchSigValType_$1($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\s*:\s*)`, $$dpth + 1, $$cr) !== null
                    && ($scope$raw_type = this.matchSigValType_$2($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new SigValType($scope$raw_id, $scope$name, $scope$raw_type);
                }
                return $$res;
            });
    }
    public matchSigValType_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<SigValType_$0> {
        return this.regexAccept(String.raw`(?:[0-9]+)`, $$dpth + 1, $$cr);
    }
    public matchSigValType_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<SigValType_$1> {
        return this.regexAccept(String.raw`(?:[a-zA-Z0-9_]+)`, $$dpth + 1, $$cr);
    }
    public matchSigValType_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<SigValType_$2> {
        return this.regexAccept(String.raw`(?:1|2)`, $$dpth + 1, $$cr);
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchChoice(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchChoice(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchChoice(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    /*
    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        for (;;) {
            const preMrk = this.mark();
            const t = func();
            if (t === null || this.pos.overallPos === preMrk.overallPos) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    */
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y");
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    /*
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    */
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    /*
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
    */
    private match$EOF(et?: ErrorTracker): Nullable<{kind: ASTKinds.$EOF}> {
        const res: {kind: ASTKinds.$EOF} | null = this.finished() ? { kind: ASTKinds.$EOF } : null;
        if(et)
            et.record(this.mark(), res, { kind: "EOF", negated: this.negating });
        return res;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<Choice>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}